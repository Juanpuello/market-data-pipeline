"""initial_migration

Revision ID: c28c0cccd3d9
Revises:
Create Date: 2025-09-20 16:02:27.220821

"""

from typing import Sequence, Union

import sqlalchemy as sa
import sqlmodel

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "c28c0cccd3d9"
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "raw_data",
        sa.Column("raw_data_id", sa.Integer(), nullable=False),
        sa.Column(
            "expression", sqlmodel.sql.sqltypes.AutoString(length=200), nullable=False
        ),
        sa.Column("date", sa.Date(), nullable=False),
        sa.Column("value", sa.Float(), nullable=False),
        sa.Column("fetch_timestamp", sa.DateTime(), nullable=False),
        sa.Column("version", sa.Integer(), nullable=False),
        sa.Column("ingestion_mode", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column(
            "source_file_uri",
            sqlmodel.sql.sqltypes.AutoString(length=500),
            nullable=False,
        ),
        sa.CheckConstraint("date IS NOT NULL", name="valid_date"),
        sa.CheckConstraint("value > 0", name="positive_value"),
        sa.CheckConstraint("version >= 1", name="positive_version"),
        sa.PrimaryKeyConstraint("raw_data_id"),
        sa.UniqueConstraint(
            "expression", "date", "version", name="uq_raw_data_expression_date_version"
        ),
    )
    op.create_index(
        "idx_raw_data_expression_date", "raw_data", ["expression", "date"], unique=False
    )
    op.create_index(
        "idx_raw_data_fetch_time", "raw_data", ["fetch_timestamp"], unique=False
    )
    op.create_index(
        "idx_raw_data_mode_version",
        "raw_data",
        ["ingestion_mode", "version"],
        unique=False,
    )
    op.create_index("idx_raw_data_version", "raw_data", ["version"], unique=False)
    op.create_index(op.f("ix_raw_data_date"), "raw_data", ["date"], unique=False)
    op.create_index(
        op.f("ix_raw_data_expression"), "raw_data", ["expression"], unique=False
    )
    op.create_index(
        op.f("ix_raw_data_fetch_timestamp"),
        "raw_data",
        ["fetch_timestamp"],
        unique=False,
    )
    op.create_index(
        op.f("ix_raw_data_ingestion_mode"), "raw_data", ["ingestion_mode"], unique=False
    )
    op.create_table(
        "clean_data",
        sa.Column("clean_data_id", sa.Integer(), nullable=False),
        sa.Column(
            "expression", sqlmodel.sql.sqltypes.AutoString(length=200), nullable=False
        ),
        sa.Column("date", sa.Date(), nullable=False),
        sa.Column(
            "currency", sqlmodel.sql.sqltypes.AutoString(length=10), nullable=False
        ),
        sa.Column("x", sqlmodel.sql.sqltypes.AutoString(length=10), nullable=False),
        sa.Column("y", sqlmodel.sql.sqltypes.AutoString(length=10), nullable=False),
        sa.Column("ref", sqlmodel.sql.sqltypes.AutoString(length=20), nullable=False),
        sa.Column("value", sa.Float(), nullable=False),
        sa.Column("raw_data_id", sa.Integer(), nullable=True),
        sa.CheckConstraint("value > 0", name="positive_value"),
        sa.CheckConstraint(
            "value >= 1.0 AND value <= 2000.0", name="reasonable_value_range"
        ),
        sa.ForeignKeyConstraint(
            ["raw_data_id"],
            ["raw_data.raw_data_id"],
        ),
        sa.PrimaryKeyConstraint("clean_data_id"),
        sa.UniqueConstraint(
            "expression",
            "date",
            "currency",
            "x",
            "y",
            "ref",
            name="uq_clean_data_combination",
        ),
    )
    op.create_index(
        "idx_clean_data_currency_ref", "clean_data", ["currency", "ref"], unique=False
    )
    op.create_index("idx_clean_data_date", "clean_data", ["date"], unique=False)
    op.create_index(
        "idx_clean_data_expression_date",
        "clean_data",
        ["expression", "date"],
        unique=False,
    )
    op.create_index(
        "idx_clean_data_raw_data_id", "clean_data", ["raw_data_id"], unique=False
    )
    op.create_index("idx_clean_data_tenors", "clean_data", ["x", "y"], unique=False)
    op.create_index(
        op.f("ix_clean_data_currency"), "clean_data", ["currency"], unique=False
    )
    op.create_index(op.f("ix_clean_data_date"), "clean_data", ["date"], unique=False)
    op.create_index(
        op.f("ix_clean_data_expression"), "clean_data", ["expression"], unique=False
    )
    op.create_index(op.f("ix_clean_data_ref"), "clean_data", ["ref"], unique=False)
    op.create_index(op.f("ix_clean_data_x"), "clean_data", ["x"], unique=False)
    op.create_index(op.f("ix_clean_data_y"), "clean_data", ["y"], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_clean_data_y"), table_name="clean_data")
    op.drop_index(op.f("ix_clean_data_x"), table_name="clean_data")
    op.drop_index(op.f("ix_clean_data_ref"), table_name="clean_data")
    op.drop_index(op.f("ix_clean_data_expression"), table_name="clean_data")
    op.drop_index(op.f("ix_clean_data_date"), table_name="clean_data")
    op.drop_index(op.f("ix_clean_data_currency"), table_name="clean_data")
    op.drop_index("idx_clean_data_tenors", table_name="clean_data")
    op.drop_index("idx_clean_data_raw_data_id", table_name="clean_data")
    op.drop_index("idx_clean_data_expression_date", table_name="clean_data")
    op.drop_index("idx_clean_data_date", table_name="clean_data")
    op.drop_index("idx_clean_data_currency_ref", table_name="clean_data")
    op.drop_table("clean_data")
    op.drop_index(op.f("ix_raw_data_ingestion_mode"), table_name="raw_data")
    op.drop_index(op.f("ix_raw_data_fetch_timestamp"), table_name="raw_data")
    op.drop_index(op.f("ix_raw_data_expression"), table_name="raw_data")
    op.drop_index(op.f("ix_raw_data_date"), table_name="raw_data")
    op.drop_index("idx_raw_data_version", table_name="raw_data")
    op.drop_index("idx_raw_data_mode_version", table_name="raw_data")
    op.drop_index("idx_raw_data_fetch_time", table_name="raw_data")
    op.drop_index("idx_raw_data_expression_date", table_name="raw_data")
    op.drop_table("raw_data")
    # ### end Alembic commands ###
